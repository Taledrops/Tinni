package com.example.tinni.ui.sounds;

import android.content.Context;
import android.os.AsyncTask;

import androidx.databinding.ObservableBoolean;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

import com.example.tinni.R;
import com.example.tinni.helpers.Constants;
import com.example.tinni.models.Category;
import com.example.tinni.models.Sound;
import com.example.tinni.models.SoundsResult;
import com.example.tinni.ui.home.HomeFragment;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * <h1>Sounds ViewModel</h1>
 * ViewModel for the sounds ui
 *
 * Variables:
 * ObservableBoolean loading: Loading indicator while sounds are loading
 * ObservableBoolean categoriesLoading: Loading indicator while categories are loading
 * MutableLiveData<List<Sound>> allSounds: A mutable list of all sounds
 * MutableLiveData<List<Sound>> sounds: A mutable list (observed) with all filtered sounds
 * MutableLiveData<List<Category>> categories: A mutable list which is observed by the SoundsFragment
 *
 * @author Nassim Amar
 * @version 1.0
 * @since   18.06.2020
 */

public class SoundsViewModel extends ViewModel
{
    public ObservableBoolean loading = new ObservableBoolean(true);
    public ObservableBoolean categoriesLoading = new ObservableBoolean(true);
    private MutableLiveData<List<Sound>> allSounds = new MutableLiveData<>();
    private MutableLiveData<List<Sound>> sounds = new MutableLiveData<>();
    private MutableLiveData<List<Category>> categories = new MutableLiveData<>();

    /**
     * <h2>Fill</h2>
     * Call populateSoundsAsyncTask to populate the categories and sounds triggered on SoundsFragment
     */

    public void fill (WeakReference<Context> context, HomeFragment.OnFillResult delegate)
    {
        new populateSoundsAsyncTask(context, allSounds, sounds, categories, loading, categoriesLoading, delegate).execute();
    }

    /**
     * <h2>Get Categories</h2>
     * Get the Category List
     */

    public MutableLiveData<List<Category>> getCategories()
    {
        return categories;
    }

    /**
     * <h2>Get Sounds</h2>
     * Get the Sound List
     */

    public MutableLiveData<List<Sound>> getSounds()
    {
        return sounds;
    }

    /**
     * <h2>Populate Sounds Async Task</h2>
     * Async Task to populate the sounds and categories
     * Categories are generated by default values on helpers/Constants.java
     * Categories and sounds might be loaded from a server in the future
     *
     * Source:
     * Sorting: https://stackoverflow.com/a/13821611/2700965
     *
     */

    private static class populateSoundsAsyncTask extends AsyncTask<Void, Void, SoundsResult>
    {
        HomeFragment.OnFillResult delegate;
        WeakReference<Context> context;
        MutableLiveData<List<Category>> categories;
        MutableLiveData<List<Sound>> allSounds;
        MutableLiveData<List<Sound>> sounds;
        ObservableBoolean loading;
        ObservableBoolean categoriesLoading;

        /**
         * <h3>Constructor</h3>
         *
         * Arguments:
         * @param _context: A weak reference to the application context (To be removed once the files are gathered from a server)
         * @param _allSounds: The full sound list (mutable)
         * @param _sounds: The sound list (mutable)
         * @param _categories: The category list (mutable)
         * @param _loading: The loading indicator
         *
         */

        private populateSoundsAsyncTask(WeakReference<Context> _context, MutableLiveData<List<Sound>> _allSounds, MutableLiveData<List<Sound>> _sounds, MutableLiveData<List<Category>> _categories, ObservableBoolean _loading, ObservableBoolean _categoriesLoading, HomeFragment.OnFillResult _delegate)
        {
            delegate = _delegate;
            allSounds = _allSounds;
            sounds = _sounds;
            categories = _categories;
            loading = _loading;
            categoriesLoading = _categoriesLoading;
            context = _context;
        }
        @Override
        protected SoundsResult doInBackground(Void... voids)
        {
            SoundsResult soundsResult;
            List<Category> newCategories = new ArrayList<>();

            newCategories.add(0, new Category(1, context.get().getString(R.string.all), false, true, false, Constants.getInstance().selectedCategories.size() == 0));
            newCategories.add(1, new Category(2, context.get().getString(R.string.favorites), true, false, false, Constants.getInstance().selectedCategories.contains(2)));
            newCategories.add(2, new Category(3, context.get().getString(R.string.my_sounds), false, false, true, Constants.getInstance().selectedCategories.contains(3)));

            newCategories.addAll(Constants.getInstance().categories);
            List<Sound> newSounds = new ArrayList<>(Constants.getInstance().sounds);

            soundsResult = new SoundsResult(newSounds, newCategories);
            return soundsResult;
        }

        protected void onPostExecute(SoundsResult soundsResult)
        {
            if (soundsResult.sounds != null && soundsResult.sounds.size() > 0)
            {
                allSounds.setValue(new ArrayList<>(soundsResult.sounds));
                sounds.setValue(soundsResult.sounds);
            }
            else
            {
                sounds.setValue(null);
            }

            if (soundsResult.categories != null && soundsResult.categories.size() > 0)
            {
                categories.setValue(soundsResult.categories);
            }
            else
            {
                categories.setValue(null);
            }
            categoriesLoading.set(false);

            if (Constants.getInstance().selectedCategories.size() > 0)
            {
                new filterSoundsAsyncTask(allSounds, sounds, loading, delegate).execute();
            }
            else
            {
                loading.set(false);
                delegate.result(true);
            }
        }
    }

    /**
     * <h2>Manual Add</h2>
     * Manually adding a sound to the list
     *
     */

    public void manualAdd (Sound s)
    {
        if (sounds.getValue() != null && allSounds.getValue() != null)
        {
            boolean reset = sounds.getValue().size() == 0;
            allSounds.getValue().add(0, s);

            if (reset)
            {
                sounds.setValue(sounds.getValue());
                allSounds.setValue(allSounds.getValue());
            }
        }
    }

    /**
     * <h2>Manual Remove</h2>
     * Manually removing a sound from the list
     *
     */

    public void manualRemove (Sound s)
    {
        if (sounds.getValue() != null && allSounds.getValue() != null)
        {
            sounds.getValue().stream().filter(x -> x.getId() == s.getId()).findFirst().ifPresent(ss -> sounds.getValue().remove(ss));
            allSounds.getValue().stream().filter(x -> x.getId() == s.getId()).findFirst().ifPresent(ss -> allSounds.getValue().remove(ss));

            if (sounds.getValue().size() == 0)
            {
                sounds.setValue(sounds.getValue());
                allSounds.setValue(allSounds.getValue());
            }
        }
    }

    /**
     * <h2>Filter List</h2>
     * Triggers filterSoundsAsyncTask
     *
     */

    public void filterList (HomeFragment.OnFillResult delegate)
    {
        new filterSoundsAsyncTask(allSounds, sounds, loading, delegate).execute();
    }

    /**
     * <h2>Filter Sounds Async Task</h2>
     * Filters the sound list by categories
     *
     * Sources:
     * https://stackoverflow.com/a/16888295/2700965
     * https://stackoverflow.com/a/11799240/2700965
     * https://stackoverflow.com/a/23813026/2700965
     *
     */

    private static class filterSoundsAsyncTask extends AsyncTask<Void, Void, List<Sound>>
    {
        HomeFragment.OnFillResult delegate;
        MutableLiveData<List<Sound>> allSounds;
        MutableLiveData<List<Sound>> sounds;
        ObservableBoolean loading;

        private filterSoundsAsyncTask(MutableLiveData<List<Sound>> _allSounds, MutableLiveData<List<Sound>> _sounds, ObservableBoolean _loading, HomeFragment.OnFillResult _delegate)
        {
            delegate = _delegate;
            allSounds = _allSounds;
            sounds = _sounds;
            loading = _loading;
        }
        @Override
        protected List<Sound> doInBackground(Void... voids)
        {
            List<Sound> filteredList = new ArrayList<>(Objects.requireNonNull(allSounds.getValue()));
            if (Constants.getInstance().selectedCategories.size() > 0)
            {
                if (!Constants.getInstance().selectedCategories.contains(2) && !Constants.getInstance().selectedCategories.contains(3))
                {
                    List<Sound> toRemove = new ArrayList<>();
                    for (Sound sound:filteredList)
                    {
                        List<Integer> ids = sound.getCategories().stream().map(Category::getId).collect(Collectors.toList());
                        if (Collections.disjoint(Constants.getInstance().selectedCategories, ids))
                        {
                            toRemove.add(sound);
                        }
                    }
                    filteredList.removeAll(toRemove);
                }
                else if (Constants.getInstance().selectedCategories.contains(2))
                {
                    filteredList.removeIf(e -> !Constants.getInstance().favorites.contains(e.getId()));
                }
                else
                {
                    filteredList.removeIf(e -> !e.isCustom());
                }
            }
            return filteredList;
        }

        protected void onPostExecute(List<Sound> newList)
        {
            sounds.setValue(newList);
            loading.set(false);
            delegate.result(true);
        }
    }
}
